balance[y+1, sim] = balance[y, sim] * (1 + rates[y]) + contrib
}
}
rownames(balance) = 1:(num_years + 1)
colnames(balance) = paste0("sim", 1:num_sims)
balance = as.data.frame(cbind(balance, "year" = 0:num_years))
balance
# convert to "long" (tall) format
pivot_longer(balance, cols = sim1:sim3)
# convert to "long" (tall) format
tbl = pivot_longer(balance, cols = sim1:sim3, names_to = "simulation")
tbl
# convert to "long" (tall) format
tbl = pivot_longer(
data = balance,
cols = sim1:sim3,
names_to = "simulation",
values_to = "amount")
tbl
ggplot(tbl, aes(x = year, y = amount, group = simulation)) +
geom_point() +
geom_line()
ggplot(tbl, aes(x = year, y = amount, group = simulation, color = simulation)) +
geom_point() +
geom_line()
# inputs
contrib = 1000
num_years = 10
num_sims = 10
set.seed(133)
rs_ord = as.list(1:num_sims)
# output (ordinary contributions)
balance = matrix(0, num_years + 1, num_sims)
# iterations
for (sim in 1:num_sims) {
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
rs_ord[[sim]] = rates
for (y in 1:num_years) {
balance[y+1, sim] = balance[y, sim] * (1 + rates[y]) + contrib
}
}
rownames(balance) = 1:(num_years + 1)
colnames(balance) = paste0("sim", 1:num_sims)
balance = as.data.frame(cbind(balance, "year" = 0:num_years))
balance
# convert to "long" (tall) format
tbl = pivot_longer(
data = balance,
cols = sim1:sim3,
names_to = "simulation",
values_to = "amount")
tbl
ggplot(tbl, aes(x = year, y = amount, group = simulation, color = simulation)) +
geom_point() +
geom_line()
# convert to "long" (tall) format
tbl = pivot_longer(
data = balance,
cols = starts_with("sim"),
names_to = "simulation",
values_to = "amount")
tbl
ggplot(tbl, aes(x = year, y = amount, group = simulation, color = simulation)) +
geom_point() +
geom_line()
# inputs
contrib = 1000
num_years = 10
num_sims = 50
set.seed(133)
rs_ord = as.list(1:num_sims)
# output (ordinary contributions)
balance = matrix(0, num_years + 1, num_sims)
# iterations
for (sim in 1:num_sims) {
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
rs_ord[[sim]] = rates
for (y in 1:num_years) {
balance[y+1, sim] = balance[y, sim] * (1 + rates[y]) + contrib
}
}
rownames(balance) = 1:(num_years + 1)
colnames(balance) = paste0("sim", 1:num_sims)
balance = as.data.frame(cbind(balance, "year" = 0:num_years))
balance
# convert to "long" (tall) format
tbl = pivot_longer(
data = balance,
cols = starts_with("sim"),
names_to = "simulation",
values_to = "amount")
tbl
ggplot(tbl, aes(x = year, y = amount, group = simulation)) +
geom_point() +
geom_line()
ggplot(tbl, aes(x = year, y = amount, group = simulation)) +
#geom_point() +
geom_line(alpha = 0.5)
runApp('~/Library/CloudStorage/Dropbox/data133/analysis/investment-simulation/app-dashboard.R')
?geom_line
runApp('~/Library/CloudStorage/Dropbox/data133/analysis/investment-simulation/app-dashboard.R')
?stat_summary
runApp('~/Library/CloudStorage/Dropbox/data133/analysis/investment-simulation/app-dashboard.R')
runApp('~/Dropbox/data133/shiny/future-value3-simulations')
library(shiny)
?varSelectInput
library(tidyverse)
starwars |> count(sex)
starwars |> count(gender)
mtcars |> count(cyl)
cyl_freqs = mtcars |> count(cyl) |>
ggplot(data = cyl_freqs, aes(x = reorder(cyl, -n), y = n)) +
geom_bar(stat = "identity")
cyl_freqs = mtcars |> count(cyl)
ggplot(data = cyl_freqs, aes(x = reorder(cyl, -n), y = n)) +
geom_bar(stat = "identity")
rm)list = ls()
rm(lists = ls())
rm(list = ls())
setwd('~')
# inputs
contrib = 6000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
balance[y+1] = balance[y] * (1 + rates[y])
names(balance) = paste0("yr", 0:num_years)
balance
y
# inputs
contrib = 6000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
balance[y+1] = balance[y] * (1 + rates[y+1])
names(balance) = paste0("yr", 0:num_years)
balance
# inputs
contrib = 1000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
balance[y+1] = balance[y] * (1 + rates[y+1])
names(balance) = paste0("yr", 0:num_years)
balance
y
balance
# inputs
contrib = 1000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
balance[num_years+1] = balance[num_years] * (1 + rates[num_years])
names(balance) = paste0("yr", 0:num_years)
balance
rates
# inputs
contrib = 1000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
# last year
balance[num_years+1] = balance[num_years] * (1 + rates[num_years])
names(balance) = paste0("yr", 0:num_years)
balance
# inputs
contrib = 1000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
# last year
balance[num_years+1] = balance[num_years] * (1 + rates[num_years])
names(balance) = paste0("yr", 0:num_years)
balance
# inputs
contrib = 1000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
# last year
balance[num_years+1] = balance[num_years] * (1 + rates[num_years])
names(balance) = paste0("yr", 0:num_years)
balance
# inputs
contrib = 1000
num_years = 4
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
# output
balance = c(contrib, rep(0, num_years))
# iterations
for (y in 1:(num_years-1)) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
# last year
balance[num_years+1] = balance[num_years] * (1 + rates[num_years])
names(balance) = paste0("yr", 0:num_years)
balance
dat = data.frame(
year = 0:num_years,
balance = balance,
contrib = cumsum(rep(contrib, num_years + 1))
)
dat
ggplot(data = dat, aes(x = year, y = balance)) +
geom_point() +
geom_line() +
geom_line(aes(x = year, y = contrib),
color = "#4A65FF", linetype = "dashed")# +
#scale_y_continuous(name = scales::comma(y))
dat = data.frame(
year = 0:num_years,
balance = balance,
contrib = c(cumsum(rep(contrib, num_years)), 0)
)
dat
ggplot(data = dat, aes(x = year, y = balance)) +
geom_point() +
geom_line() +
geom_line(aes(x = year, y = contrib),
color = "#4A65FF", linetype = "dashed")# +
#scale_y_continuous(name = scales::comma(y))
dat = data.frame(
year = 0:num_years,
balance = balance,
contrib = cumsum(c(rep(contrib, num_years), 0))
)
dat
ggplot(data = dat, aes(x = year, y = balance)) +
geom_point() +
geom_line() +
geom_line(aes(x = year, y = contrib),
color = "#4A65FF", linetype = "dashed")# +
#scale_y_continuous(name = scales::comma(y))
# inputs
contrib = 1000
num_years = 10
num_sims = 50
set.seed(133)
rs_ord = as.list(1:num_sims)
# output (ordinary contributions)
balance = matrix(0, num_years + 1, num_sims)
# iterations
for (sim in 1:num_sims) {
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
rs_ord[[sim]] = rates
for (y in 1:num_years) {
balance[y+1, sim] = balance[y, sim] * (1 + rates[y]) + contrib
}
}
rownames(balance) = 1:(num_years + 1)
colnames(balance) = paste0("sim", 1:num_sims)
balance = as.data.frame(cbind("year" = 0:input$num_years, balance))
# inputs
contrib = 1000
num_years = 10
num_sims = 50
set.seed(133)
rs_ord = as.list(1:num_sims)
# output (ordinary contributions)
balance = matrix(0, num_years + 1, num_sims)
# iterations
for (sim in 1:num_sims) {
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
rs_ord[[sim]] = rates
for (y in 1:num_years) {
balance[y+1, sim] = balance[y, sim] * (1 + rates[y]) + contrib
}
}
rownames(balance) = 1:(num_years + 1)
colnames(balance) = paste0("sim", 1:num_sims)
balance = as.data.frame(cbind("year" = 0:num_years, balance))
balance
# convert to "long" (tall) format
tbl = pivot_longer(
data = balance,
cols = starts_with("sim"),
names_to = "simulation",
values_to = "amount")
tbl
contrib = 1000
num_years = 4
set.seed(133)
# output (ordinary contributions)
balance = rep(0, num_years + 1, num_sims)
balance
# inputs
contrib = 1000
num_years = 4
set.seed(133)
# output (ordinary contributions)
balance = rep(0, num_years + 1)
balance
names(balance) = 0:num_years
balance
# output (ordinary contributions)
balance = rep(0, num_years + 1)
names(balance) = paste0("yr", 0:num_years)
balance
# iterations
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
rates
# inputs
contrib = 1000
num_years = 4
set.seed(133)
# output (ordinary contributions)
balance = rep(0, num_years + 1)
names(balance) = paste0("yr", 0:num_years)
balance
# iterations
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
for (y in 1:num_years) {
balance[y+1] = balance[y] * (1 + rates[y]) + contrib
}
balance
rm(list = ls())
# inputs
contrib = 1000
num_years = 4
num_sims = 3
set.seed(133) # reproducibility
# output (ordinary contributions)
bal_mat = matrix(0, num_years + 1, num_sims)
# iterations
for (sim in 1:num_sims) {
rates = rnorm(n = num_years, mean = 0.10, sd = 0.20)
for (y in 1:num_years) {
bal_mat[y+1, sim] = bal_mat[y, sim] * (1 + rates[y]) + contrib
}
}
rownames(bal_mat) = 1:(num_years + 1)
colnames(bal_mat) = paste0("sim", 1:num_sims)
balance = as.data.frame(cbind("year" = 0:num_years, bal_mat))
balance
bal_df = as.data.frame(cbind("year" = 0:num_years, bal_mat))
bal_df
# convert to "long" (tall) format
tbl = pivot_longer(
data = bal_df,
cols = starts_with("sim"),
names_to = "simulation",
values_to = "balance")
tbl
ggplot(tbl, aes(x = year, y = balance, group = simulation)) +
#geom_point() +
geom_line(alpha = 0.5)
ggplot(iris, aes(x = Speal.Length, y = Petal.Length)) + facet_grid(Species ~ .)
ggplot(iris, aes(x = Speal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_grid(Species ~ .)
ggplot(iris, aes(x = Speal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_grid(Species ~ .)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_grid(Species ~ .)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_grid(. ~ Species)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_wrap(. ~ Species)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_wrap(. ~ Species, nrow = 2)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_wrap(Species ~ ., nrow = 2)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_wrap(Species ~ ., ncol = 2)
iris$type = rep(1:3, each = 50)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_wrap(type ~ ., ncol = 2)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Species)) +
facet_wrap(~ type, ncol = 2)
?sliderInput
ggplot(iris, aes(x = Speal.Length, y = Petal.Length)) + facet_grid(Species ~ .)
runApp('Library/CloudStorage/Dropbox/data133/shiny/mapping-storms1-basic')
118/194
16*300
16*200
runApp('Dropbox/data133/hws/app2/app2-draft.R')
666.6667 * ((1+0.08/12)^(3*12) - (1 + 0.02)^(3*12)) / (0.08/12 - 0.02/12)
666.6667 * ((1+0.08/12)^(3*12) - (1 + 0.02/12)^(3*12)) / (0.08/12 - 0.02/12)
?annotate
?text
?fluidPage
setwd("~/Dropbox/data133/hws/app2")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, error = TRUE, warning = FALSE)
library(tidyverse)
library(plotly)
# growing annuity
growing_annuity = function(pmt, n, r, g, k) {
pmt * ((1 + r/k)^(n*k) - (1 + g/k)^(n*k)) / (r/k - g/k)
}
# future value (lump sum)
future_value = function(p, n, r, k) {
p * (1 + r/k)^(n*k)
}
salary = 80000
rate_growth = 0.02
contrib_current = 0.10
years = 5
rate_return = 0.08
k = 12
target = 35000
savings1 = salary * contrib_current
monthly1 = savings1 / k
salary2 = salary * (1 + rate_growth)
fvga1 = growing_annuity(monthly1, 1, rate_return, rate_growth, k)
salary2 = salary * (1 + rate_growth)
fvga2 = growing_annuity(monthly1, 2, rate_return, rate_growth, k)
savings2 = salary2 * contrib_current
salary3 = salary2 * (1 + rate_growth)
fvga3 = growing_annuity(monthly1, 3, rate_return, rate_growth, k)
savings3 = salary3 * contrib_current
fvga = growing_annuity(monthly1, 1:years, rate_return, rate_growth, k)
salaries = salary * (1 + rate_growth)^(0:(years-1))
x = (salary * contrib_current) * (1 + rate_growth)^(0:(years-1))
dat_current = data.frame(
year = 1:years,
salary = salaries,
annual_contrib = x,
balance = fvga
)
write_csv(dat_current, "balance.csv")
dat_current = dat_current |>
mutate(
own = cumsum(annual_contrib),
growth = balance - own
)
write_csv(dat_current, "balance.csv")
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tidyverse)
dat_current = read_csv("balance.csv")
plot2 = dat_current |>
select(year, own, growth) |>
pivot_longer(cols = own:growth,
names_to = "type") |>
ggplot(aes(x = year, y = value, fill = type)) +
geom_col() +
scale_y_continuous(labels = scales::comma) +
labs(title = "Composition of retirement balance") +
theme(legend.position = "bottom",
legend.title = element_blank()) +
theme_minimal()
plot2
dat_current
runApp('app-template-standard.R')
1/16
1/6
runApp('app-template-standard.R')
?datatable
runApp('app-template-standard.R')
runApp('app-template-dashboard.R')
runApp('app-template-dashboard.R')
?bs_theme
runApp('app-template-dashboard.R')
runApp('app-template-dashboard.R')
runApp('app-template-dashboard.R')
?page_sidebar
runApp('app-template-dashboard.R')
bootswatch_themes()
runApp('app-template-dashboard.R')
runApp('app-template-standard.R')
runApp('~/Dropbox/data133/shiny/future-value1-numerics')
runApp('~/Dropbox/data133/shiny/future-value4-dashboard')
runApp('~/Dropbox/data133/shiny/mtcars-scatterplots1-ggplot')
setwd("~/Dropbox/data133/shiny/mtcars-scatterplots3-dashboard")
runApp()
colourpicker:::colourPickerAddin()
runApp()
runApp()
